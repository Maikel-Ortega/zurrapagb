; Prueba de sprites
; Miguel Ortega Hiraldo

INCLUDE "gbhw.inc"

_SPR0_Y		EQU		_OAMRAM; La Y del sprite0, inicio de la memoria de sprites
_SPR0_X		EQU		_OAMRAM+1
_SPR0_NUM	EQU		_OAMRAM+2
_SPR0_ATT	EQU		_OAMRAM+3

;creamos un par de variables para el movimiento

_MOVX		EQU		_RAM		;Las guardamos en la RAM de datos
_MOVY		EQU		_RAM+1

SECTION "start",HOME[$0100]
	nop
	jp		inicio
	
	
	ROM_HEADER	ROM_NOMBC, ROM_SIZE_32KBYTE, RAM_SIZE_0KBYTE
	
inicio:
	nop
	di
	ld		sp, $ffff
	
inicializacion:
	ld		a, %11100100
	
	ld		[rBGP],a
	ld		[rOBP0],a
	
	ld		a, 0
	ld		[rSCX], a
	ld		[rSCY], a
	
	call	apaga_LCD
	
	ld		hl, Tiles
	ld 		de, _VRAM
	ld		b, 32
	
.bucle_carga:
	ld		a,[hl]
	ld		[de],a
	dec		b
	jr		z, .fin_bucle_carga
	inc		hl
	inc		de
	jr		.bucle_carga
.fin_bucle_carga:

	ld		hl, _SCRN0
	ld		de, 32*32
.bucle_limpieza:
	ld		a, 0
	ld		[hl], a
	dec		de
	ld		a, d
	or		e
	jp		z, .fin_bucle_limpieza
	inc		hl
	jp		.bucle_limpieza
.fin_bucle_limpieza

	ld		a, 30
	ld		[_SPR0_Y], a	;Y del sprite
	ld		a, 30
	ld		[_SPR0_X], a	;X del sprite
	ld		a, 1
	ld		[_SPR0_NUM],a ;numero del sprite
	ld		a, 0
	ld		[_SPR0_ATT],a	;atributos, nada de momento

	ld      a, LCDCF_ON|LCDCF_BG8000|LCDCF_BG9800|LCDCF_BGON|LCDCF_OBJ8|LCDCF_OBJON
    ld      [rLCDC], a
	
	;Variables para la animaci칩n
	ld		a, 1
	ld		[_MOVX], a
	ld		[_MOVY], a
 
    ; bucle infinito
animacion:
	;lo primero esperamos al vblank para que no se forme
.wait:
	ld		a, [rLY]
	cp		145
	jr		nz, .wait
	
	ld		a, [_SPR0_Y]
	ld		hl, _MOVY
	add		a, [hl]			;incremento la Y
	ld		hl, _SPR0_Y
	ld		[hl], a			;guardo la nueva Y
	; comparamos para cambiar de sentido o no
	cp		152				;miramos si nos salimos de la pantalla por arriba
	jr		z, .dec_y
	cp		16				;miramos si salimos por abajo
	jr		z, .inc_y
	; si no hay que cambiar, seguimos
	jr		.end_y
.dec_y:
	ld		a, -1
	ld		[_MOVY], a
	jr		.end_y
.inc_y:
	ld		a, 1
	ld		[_MOVY], a
.end_y:
    ; vamos con las X, lo mismo pero cambiando los m치rgenes
    ld      a, [_SPR0_X]    ; cargamos la posici칩n X actual del sprite
    ld      hl, _MOVX       ; en hl, la direcci칩n del incremento X
    add     a, [hl]         ; sumamos
    ld      hl, _SPR0_X
    ld      [hl], a         ; guardamos
    ; comparamos para ver si hay que cambiar el sentido
    cp      160             ; para que no se salga de la pantalla (max X)
    jr      z, .dec_x
    cp      8               ; lo mismo, minima coord izq = 8
    jr      z, .inc_x
    ; no hay que cambiar
    jr      .end_x
.dec_x:
    ld      a, -1           ; ahora hay que decrementar las X
    ld      [_MOVX], a
    jr      .end_x
.inc_x:
    ld      a, 1            ; ahora hay que incrementar las X
    ld      [_MOVX], a
.end_x:
	call 	retardo
	jr		animacion
	
apaga_LCD:
	ld		a,[rLCDC]
	rlca	
	ret		nc
	
.espera_VBlank
	ld	a, [rLY]
	cp	145
	jr	nz, .espera_VBlank
	ld	a,[rLCDC]
	res	7,a
	ld	[rLCDC],a
	
	ret

retardo:
	ld		de, 2000
.delay:
	dec		de
	ld		a,d
	or		e
	jr		z, .fin_delay
	nop
	jr		.delay
.fin_delay:
	ret
	
	
Tiles:
    DB  $AA, $00, $44, $00, $AA, $00, $11, $00
    DB  $AA, $00, $44, $00, $AA, $00, $11, $00
    DB  $3E, $3E, $41, $7F, $41, $6B, $41, $7F
    DB  $41, $63, $41, $7F, $3E, $3E, $00, $00
EndTiles:


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	